---
title: "STAT 331 Portfolio"
author: "Lucy Thackray"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

evals <- read_csv(here::here("Week 3", "teacher_evals.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2



```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

#Lab 2 Q5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(teacher_id, question_no, seniority),
                .fns = ~ as.factor(.x))) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants,
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2



```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
#Lab 3 Q5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(teacher_id, question_no, seniority),
                .fns = ~ as.factor(.x))) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants,
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
#Lab 4 Q2
ca_childcare <- childcare_costs |>
left_join(y = counties) |>
filter(state_name == "California")
ca_childcare
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Lab 5
get_fit_now_check_in |>
inner_join(y = get_fit_now_member,
           by = join_by(membership_id == id)) |>
inner_join(y = person,
           by = join_by(person_id == id,
                        name == name)) |>
inner_join(y = drivers_license,
           by = join_by(license_id == id))|>
  filter(membership_status == "gold",
         str_detect(plate_number, pattern = "H42W") == TRUE,
         str_detect(membership_id, pattern = "^48Z") == TRUE)

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#Lab 4 Q3
ca_childcare <- ca_childcare |>
left_join(y = tax_rev,
          by = join_by(county_name == entity_name,
                        study_year == year))
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
#Lab 5
interviewpeople <- interview |>
inner_join(y = person,
          by = join_by(person_id == id)) 
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
#Lab 5
get_fit_now_check_in |>
inner_join(y = get_fit_now_member,
           by = join_by(membership_id == id)) |>
inner_join(y = person,
           by = join_by(person_id == id,
                        name == name)) |>
inner_join(y = drivers_license,
           by = join_by(license_id == id))|>
  filter(membership_status == "gold",
         str_detect(plate_number, pattern = "H42W") == TRUE,
         str_detect(membership_id, pattern = "^48Z") == TRUE)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Lab 4 Q6
ca_childcare |>
rename(Infant = mc_infant,
       Toddler = mc_toddler,
       Preschool = mc_preschool ) |>
pivot_longer(cols = Infant: Preschool, 
             names_to = "Age_class", 
             values_to = "Median_price") 
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#Lab 4 Q5
ca_childcare |>
filter(study_year %in% c(2008, 2018)) |>
pivot_wider(names_from = study_year,
            values_from = mhi_2018) |> 
group_by(region) |>
summarize(`2008 median household income` = median(`2008`, na.rm = TRUE),
          `2018 median household income` = median(`2018`, na.rm = TRUE)) |>
arrange(desc(`2018 median household income`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 3
#USE %IN% INSTEAD OF BAR
teacher_evals_clean |>
filter(academic_degree == "dr" | academic_degree == "prof") |>
  group_by(teacher_id) |>
  summarize(percent_resp = mean(resp_share), 
            sex = first(sex), 
            seniority = first(seniority))|>
  filter(percent_resp == max(percent_resp) |
         percent_resp == min(percent_resp)) |>
  arrange((percent_resp))
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

colors<-c("#f07857", "#4fb06d" )
ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_jitter( alpha = 0.5) +
  geom_boxplot(outliers = FALSE, mapping = aes(color = sex)) +
  labs(x = "Weight (g)", y = "Species", color = "Sex",
       subtitle = "<span style = 'color:#f07857;'>Female</span> vs <span style = 'color:#4fb06d;'>Male</span> rodent species weights") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        legend.position = "none", 
        plot.subtitle = element_markdown(),
        axis.ticks.y = element_blank()) +
scale_color_manual(values = colors)  
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

colors<-c("#f07857", "#4fb06d" )
ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_jitter( alpha = 0.5) +
  geom_boxplot(outliers = FALSE, mapping = aes(color = sex)) +
  labs(x = "Weight (g)", y = "Species", color = "Sex",
       subtitle = "<span style = 'color:#f07857;'>Female</span> vs <span style = 'color:#4fb06d;'>Male</span> rodent species weights") +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        legend.position = "none", 
        plot.subtitle = element_markdown(),
        axis.ticks.y = element_blank()) +
scale_color_manual(values = colors) 
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

#Lab 4 Q7 - check if it is a nested function
colors <- colorRampPalette(brewer.pal(7, "Accent"))(10)

ca_childcare |>
rename(Infant = mc_infant,
       Toddler = mc_toddler,
       Preschool = mc_preschool ) |>
pivot_longer(cols = Infant: Preschool, 
             names_to = "Age_class", 
             values_to = "Median_price") |>
ggplot(mapping = aes(x = study_year, 
                     y = Median_price, 
                     color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = Median_price))) + 
  geom_point(size = 0.5) +
  facet_wrap(~factor(Age_class, c("Infant", "Toddler", "Preschool"))) + #https://forum.posit.co/t/re-ordering-facet-wrap/141999
  theme_bw() +
  theme(aspect.ratio = 1) +
  geom_smooth(method = loess, size = 0.5) +
  labs(x = "Study Year", 
       y = " ", 
       subtitle = "Weekly Median Price for Center Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(n.breaks = 6) +
  scale_color_manual(values = colors) +
  theme(text = element_text(size = 7)) 
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
#Challenge 4 Plot
colors <- c("#6C88C4", "#FF828B")
challenge |>
 mutate(year = as.factor(study_year)) |>
  ggplot(mapping = aes(x = year,
                       y = Median_price,
                       color = type_of_care)) +
          
  theme_bw() +
  geom_jitter (alpha = 0.5, aes(color = type_of_care), show.legend = FALSE) +
  geom_boxplot(outliers = FALSE) +
  labs(x = "Study Year",
       y = "",
       color = "Type of Childcare",
       subtitle = "Weekly Median Price ($) for <span style = 'color:#6C88C4;'>Center Based</span> vs <span style = 'color:#FF828B;'>Family</span> Childcare") +
    scale_color_manual(values = colors) +
  theme(legend.position = "none", 
        plot.subtitle = element_markdown(),
        panel.grid.major.x = element_blank()) 
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
#Lab 4 Q7
colors <- colorRampPalette(brewer.pal(7, "Accent"))(10)

ca_childcare |>
rename(Infant = mc_infant,
       Toddler = mc_toddler,
       Preschool = mc_preschool ) |>
pivot_longer(cols = Infant: Preschool, 
             names_to = "Age_class", 
             values_to = "Median_price") |>
ggplot(mapping = aes(x = study_year, 
                     y = Median_price, 
                     color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = Median_price))) + 
  geom_point(size = 0.5) +
  facet_wrap(~factor(Age_class, c("Infant", "Toddler", "Preschool"))) + #https://forum.posit.co/t/re-ordering-facet-wrap/141999
  theme_bw() +
  theme(aspect.ratio = 1) +
  geom_smooth(method = loess, size = 0.5) +
  labs(x = "Study Year", 
       y = " ", 
       subtitle = "Weekly Median Price for Center Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(n.breaks = 6) +
  scale_color_manual(values = colors) +
  theme(text = element_text(size = 7)) 
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 3 Q10
teacher_evals_clean |>
  group_by(teacher_id) |>
  filter(n_distinct(course_id) >= 5, 
         question_no == "901") |>
  summarize(mean_rating = mean(SET_score_avg)) |>
  filter(mean_rating == max(mean_rating) | 
         mean_rating == min(mean_rating)) |>
  arrange(mean_rating) 

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
#Lab 4 Q5
ca_childcare |>
filter(study_year %in% c(2008, 2018)) |>
pivot_wider(names_from = study_year,
            values_from = mhi_2018) |> 
group_by(region) |>
summarize(`2008 median household income` = median(`2008`, na.rm = TRUE),
          `2018 median household income` = median(`2018`, na.rm = TRUE)) |>
arrange(desc(`2018 median household income`))
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
#Lab 4 Q5
ca_childcare |>
filter(study_year %in% c(2008, 2018)) |>
pivot_wider(names_from = study_year,
            values_from = mhi_2018) |> 
group_by(region) |>
summarize(`2008 median household income` = median(`2008`, na.rm = TRUE),
          `2018 median household income` = median(`2018`, na.rm = TRUE)) |>
arrange(desc(`2018 median household income`))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Lab 5
facebook_event_checkin |>
  inner_join(y = person,
             by = join_by(person_id == id)) |>
  inner_join(y = drivers_license,
             by = join_by(license_id == id)) |>
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         height >= 65 & height <= 67,
         event_name == "SQL Symphony Concert")
```

-   using `across()`

```{r}
#| label: pe-1-across
#Lab 3 Q5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(teacher_id, question_no, seniority),
                .fns = ~ as.factor(.x))) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants,
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Q6
ca_childcare |>
rename(Infant = mc_infant,
       Toddler = mc_toddler,
       Preschool = mc_preschool ) |>
pivot_longer(cols = Infant: Preschool, 
             names_to = "Age_class", 
             values_to = "Median_price") |>
ggplot(mapping = aes(x = study_year, 
                     y = Median_price, 
                     color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = Median_price))) + 
  geom_point(size = 0.5) +
  facet_wrap(~factor(Age_class, c("Infant", "Toddler", "Preschool"))) + 
  theme_bw() +
  theme(aspect.ratio = 1) +
  geom_smooth(method = loess, size = 0.5) +
  labs(x = "Study Year", 
       y = " ", 
       subtitle = "Weekly Median Price for Center Based Childcare ($)",
       color = "California Region") +
  scale_x_continuous(n.breaks = 6) +
  scale_color_manual(values = colors) +
  theme(text = element_text(size = 7)) 
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1


```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
